<?php

/**
 * Class FieldtypeFontIconPicker
 *
 * @author			: İskender TOTOĞLU, @ukyo (community), @trk (Github)
 * @website			: http://altivebir.com.tr
 * @projectWebsite	: https://github.com/trk/FieldtypeFontIconPicker
 */
class FieldtypeFontIconPicker extends Fieldtype implements Module, ConfigurableModule
{
	/**
	 * @var array $resources
	 */
	public $resources = array();

	/**
	 * @inheritDoc
	 *
	 * @return array
	 */
	public static function getModuleInfo()
	{
		return array(
			'title' => 'Icon Picker',
			'summary' => __('Allow you to use icon picker input field.'),
			'version' => 203,
			'author' => 'İskender TOTOĞLU | @ukyo(community), @trk (Github), http://altivebir.com.tr',
			'icon' => 'hand-pointer-o',
			'href' => 'https://github.com/trk/FieldtypeFontIconPicker',
			'installs' => array(
				'InputfieldFontIconPicker',
				'MarkupFontIconPicker'
			),
		);
	}

	/**
	 * Finder: find config files for module
	 *
	 * @param string $path
	 * @param string $filter
	 * 
	 * @return array
	 */
	protected function finder(string $path, $filter = "configs/IconPicker.")
	{
		if ($this->useGlob) {
            $paths = glob('{' . $this->config->paths->templates . $filter. '*.php,' . $this->config->paths->siteModules . '*/' . $filter . '*.php}', GLOB_BRACE | GLOB_NOSORT);
        } else {
            $paths = array();

			foreach($this->files->find($path, ["extensions" => ["php"]]) as $path) {
				if ($filter && strpos($path, $filter) === false) {
					continue;
				}

				$paths[] = $path;
			}
		}
		
		return $paths;
	}

	/**
	 * @inheritDoc
	 *
	 * @return array
	 */
	public function resources()
	{
		$resources = array();

		$paths = array_merge($this->finder($this->config->paths->siteModules), $this->finder($this->config->paths->templates . "configs" . DIRECTORY_SEPARATOR));
        
        foreach ($paths as $file) {

			$dirname = dirname(dirname($file));
			$base = strtolower(str_replace([dirname(dirname(dirname($file))), "/", "\\"], "", $dirname));
			$filename = str_replace([dirname($file), "/", "\\", "IconPicker.", ".php"], "", $file);
	
			$source = include $file;
	
			if (is_array($source)) {
				
				$name = isset($source["name"]) ? $source["name"] : $filename;
				$title = isset($source["title"]) ? $source["title"] : $name;
				$version = isset($source["version"]) ? $source["version"] : "";
				$styles = isset($source["styles"]) && is_array($source["styles"]) ? $source["styles"] : array();
				$scripts = isset($source["scripts"]) && is_array($source["scripts"]) ? $source["scripts"] : array();
				$categorized = isset($source["categorized"]) ? $source["categorized"] : false;
				$attributes = isset($source["attributes"]) ? $source["attributes"] : array();

	
				$resources["{$base}.{$name}"] = array(
					"base" => $base,
					"filename" => $filename,
					"name" => $name,
					"title" => $title,
					"version" => $version,
					"styles" => $styles,
					"scripts" => $scripts,
					"categorized" => $categorized,
					"attributes" => $attributes,
					"icons" => array(),
					"file" => $file
				);
			}
		}

		return $resources;
	}

	/**
	 * Return the associated InputfieldFontIconPicker
	 *
	 */
	public function getInputfield(Page $page, Field $field)
	{
		$inputField = $this->modules->get('InputfieldFontIconPicker');

		return $inputField;
	}
	
	/**
	 * @inheritDoc
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string $value
	 * 
	 * @return string
	 */
	public function sanitizeValue(Page $page, Field $field, $value)
	{
		$inputField = $this->getInputfield($page, $field);
		$resource = $inputField->resource($field->iconLibrary);
		$prefix = isset($resource["attributes"]["prefix"]) ? $resource["attributes"]["prefix"] : "";

		if($prefix) {
            $value = str_replace($prefix, '', $value);
		}
		
		return $value;
	}

	/**
	 * Return the database schema in specified format
	 *
	 */
	public function getDatabaseSchema(Field $field)
	{
		// get the default schema
		$schema = parent::getDatabaseSchema($field);

		$schema['data'] = "VARCHAR(255) NOT NULL DEFAULT ''";

		return $schema;
	}

	/**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * 
     * @return InputfieldsWrapper
     *
     */
    public function getModuleConfigInputfields(array $data) {
        
        $wrapper = new InputfieldWrapper();

        /**
         * @var InputfieldCheckbox $checkbox
         */
        $checkbox = wire('modules')->get('InputfieldCheckbox');
        $checkbox->attr('name', 'useGlob');
        $checkbox->set('label', 'Finder method');
        $checkbox->set('checkboxLabel', __('Use `glob` method for find config files'));
        $checkbox->attr('checked', $this->useGlob ? 'checked' : '');

        $wrapper->add($checkbox);
        
		return $wrapper;
	}
}
